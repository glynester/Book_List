import React, { Component } from 'react';
import { connect } from 'react-redux';  //  promoted booklist to a container by first importing the connect function 
import { selectBook } from '../actions/index';
import { bindActionCreators } from 'redux'; //  This is what we're going to use to make sure that the action that is generated by the action creator actually ends up flowing through all the different reducers.


class BookList extends Component {
  renderList(){
    return this.props.books.map(book=>{
      return (
        <li 
          key={book.title} 
          onClick={()=>this.props.selectBook(book)}
          className='list-group-item'>
          {book.title}
        </li>)
    })
  }
  render(){
    // console.log(this.props.test123)
    return (
      <ul className='list-group col-sm-4'>
        {this.renderList()}
      </ul>)
  }
}

function mapStateToProps(state){
  // It takes in the application state (the entire thing) and whatever is returned from here will show up as props inside of booklist.
  // Object returned here will be equal to "this.props"
  return {
    // test123: '123'
    books: state.books
  }
}

// Anything returned from this function wil end up as props on the BookList container.
function mapDispatchToProps(dispatch){
  // Whenever selectBook is called, the result should be passed (dispatched) to all of our reducers.
  return bindActionCreators({ selectBook: selectBook }, dispatch);
}

// whenever we make a container file we don't want to export booklist  component; we want to export the container.
// Connect takes a function and a component and produces a container.
// this function right here is really the glue between react and redux.
// Promote BookList from a component to a container, it needs to know about this new dispatch method 'selectBook'. Make it available as a prop.
export default connect(mapStateToProps, mapDispatchToProps)(BookList);

// A container is a normal React component that has a direct connection to the state managed by redux.

// If our state ever changes this container (BookList) will instantly render with the new list of books.

// Initially book list started off as a component but then we decided that it needed to be aware of our state within the redux side of the application so We decided to promote it to a container.